#!/usr/bin/python
# -*- coding: utf-8 -*-


''' Copyright 2012-2021 Smartling, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this work except in compliance with the License.
 * You may obtain a copy of the License in the LICENSE file, or at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limit
 '''

import json
import collections
from Parameters import Parameter, MuptipartProperty
from Method import Method

class ApiSource():
    def __init__(self, name):
        self.name = name
        self.methods = []

    def collectMethods(self, opaDict):
        pt = opaDict['paths']
        all_tags = []
        for k,v  in opaDict['paths'].items():
            for method, descr in v.items():
                if method == '$ref': continue
                #if descr['operationId'] != 'updateCustomField': continue
                if self.name in descr['tags']:
                    m = Method(k, method, descr, opaDict)
                    self.patchExportTranslations(descr, m)
                    self.methods.append(m)

    def patchExportTranslations(self, descr, m):
        if descr['operationId'] == 'exportFileTranslations':
            prop_dict = {
                "type": "string",
                "format": "binary",
                "description": "The file contents to upload."
            }
            mp = MuptipartProperty('file', prop_dict)
            mp.setRequired()
            m.need_multipart = True
            m.mp_params.insert(0, mp)

    def build(self):
        rows = []
        rows.append('from .UrlV2Helper import UrlV2Helper')
        rows.append('from .ApiV2 import ApiV2')
        rows.append('')
        rows.append('class %sApiAuto(ApiV2):' % self.name.replace(' ','').replace('&',''))
        rows.append('')
        rows.append('    def __init__(self, userIdentifier, userSecret, projectId, proxySettings=None):')
        rows.append('        ApiV2.__init__(self, userIdentifier, userSecret, proxySettings)')
        rows.append('        self.urlHelper = UrlV2Helper(projectId)')
        rows.append('')

        for m in self.methods[:]:
            built = m.build()
            if built:
                rows.append(built)
                rows.append('')
                rows.append('')
                rows.append('')
        return '\n'.join(rows)

    exampleHeader="""
#!/usr/bin/python
# -*- coding: utf-8 -*-


''' Copyright 2012-2021 Smartling, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this work except in compliance with the License.
 * You may obtain a copy of the License in the LICENSE file, or at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
'''

import os
import sys

lib_path = os.path.abspath('../')
sys.path.append(lib_path)  # allow to import ../smartlingApiSdk/SmartlingFileApi

from smartlingApiSdk.JobsApiAutoGenerated import {API_NAME}
from smartlingApiSdk.ProxySettings import ProxySettings
from smartlingApiSdk.Credentials import Credentials

isPython3 =  sys.version_info[:2] >= (3,0)

def assert_equal(a,b):
    if a != b :
        err = "Assertion Failed: '%s' != '%s'" % (a,b)
        if not isPython3 and type(err) == str:
            err = err.decode('utf-8', 'ignore')
        raise Exception(repr(err))

class test{API_NAME}(object):

    CODE_SUCCESS_TOKEN = 'SUCCESS'

    def setUp(self):
        credentials = Credentials() #Gets your Smartling credetnials from environment variables
        self.MY_USER_IDENTIFIER = credentials.MY_USER_IDENTIFIER
        self.MY_USER_SECRET = credentials.MY_USER_SECRET
        self.MY_PROJECT_ID = credentials.MY_PROJECT_ID

        #needed for testProjects
        self.MY_ACCOUNT_UID = credentials.MY_ACCOUNT_UID

        if self.MY_ACCOUNT_UID == "CHANGE_ME":
            print("can't test projects api call, set self.MY_ACCOUNT_UID or export SL_ACCOUNT_UID=*********")
            return

        useProxy = False
        if useProxy :
            proxySettings = ProxySettings("login", "password", "proxy_host", "proxy_port or None")
        else:
            proxySettings = None

        self.papi = {API_NAME}(self.MY_USER_IDENTIFIER, self.MY_USER_SECRET, self.MY_PROJECT_ID, proxySettings)

        print("setUp", "OK", "\\n")


    def tearDown(self):
        print("tearDown", "OK")

"""
    exampleFooter = """
t = test{API_NAME}()
t.setUp()
%s
t.tearDown()
"""

    def buildExample(self):
        rows = []
        myname = self.name.replace(' ','').replace('&','')
        myname += "ApiAuto"
        hdr = self.exampleHeader.replace('{API_NAME}', myname)

        rows.append(hdr)
        testCalls = []
        for m in self.methods[:]:
            built = m.buildExample()
            capitalized = m.operationId[0].capitalize() + m.operationId[1:]
            test_call = 't.test%s()' % capitalized
            if self.methods.index(m) >= 2 : test_call = '#'+test_call
            testCalls.append(test_call)
            if built:
                rows.append(built)
                rows.append('')
                rows.append('')
                rows.append('')

        ftr = self.exampleFooter.replace('{API_NAME}', myname)
        rows.append(ftr % "\n".join(testCalls))
        return '\n'.join(rows)



