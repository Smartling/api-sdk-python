#!/usr/bin/python
# -*- coding: utf-8 -*-


''' Copyright 2012-2021 Smartling, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this work except in compliance with the License.
 * You may obtain a copy of the License in the LICENSE file, or at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limit
 '''

import json
import collections
from Parameters import Parameter, MuptipartProperty
from Method import Method

class ApiSource():
    def __init__(self, name):
        self.name = name
        self.methods = []

    def collectMethods(self, opaDict):
        pt = opaDict['paths']
        all_tags = []
        for k,v  in opaDict['paths'].items():
            for method, descr in v.items():
                if method == '$ref': continue
                #if descr['operationId'] != 'updateCustomField': continue
                if self.name in descr['tags']:
                    m = Method(k, method, descr, opaDict)
                    self.patchExportTranslations(descr, m)
                    self.methods.append(m)

    def patchExportTranslations(self, descr, m):
        if descr['operationId'] == 'exportFileTranslations':
            prop_dict = {
                "type": "string",
                "format": "binary",
                "description": "The file contents to upload."
            }
            mp = MuptipartProperty('file', prop_dict)
            mp.setRequired()
            m.need_multipart = True
            m.mp_params.insert(0, mp)

    def build(self):
        rows = []
        rows.append('from .UrlV2Helper import UrlV2Helper')
        rows.append('from .ApiV2 import ApiV2')
        rows.append('')
        rows.append('class %sApiAuto(ApiV2):' % self.name.replace(' ','').replace('&',''))
        rows.append('')
        rows.append('    def __init__(self, userIdentifier, userSecret, projectId, proxySettings=None):')
        rows.append('        ApiV2.__init__(self, userIdentifier, userSecret, proxySettings)')
        rows.append('        self.urlHelper = UrlV2Helper(projectId)')
        rows.append('')

        for m in self.methods[:]:
            built = m.build()
            if built:
                rows.append(built)
                rows.append('')
                rows.append('')
                rows.append('')
        return '\n'.join(rows)


    def buildWrapperMap(self):
        oldWrapper= open('smartlingApiSdk/SmartlingFileApiV2.py').read().split('\n')
        old_method_lines = []
        wr_name = ''
        self.wrMap = {}
        for line in oldWrapper:
            if 'def ' in line and not '__init__' in line:
                wr_name = line.split('def ')[1]
                wr_name = wr_name.split('(')[0]
            if 'return self.' in line and wr_name:
                api_name = line.split('return self.')[1]
                api_name = api_name.split('(')[0]
                api_name = '.%s(' % api_name
                nn = '.%s(' % wr_name
                self.wrMap[api_name] = nn
                wr_name = ''

    def migrateExample(self):
        self.buildWrapperMap()
        src_from = 'example/IntermediateExample.py'
        src_to = 'example/AutoIMExample.py'
        from_lines = open(src_from, 'r').read().split('\n')
        to_lines = []
        for line in from_lines:
            for api in self.methods:
                if api.oldMethodName:
                    on = self.wrMap[api.oldMethodName]
                    if on and on in line:
                        line = line.replace(on, api.newMethodName)
                        break
            to_lines.append(line)
        result = '\n'.join(to_lines)
        rewrites = {
            'SmartlingFileApiV2(': 'FilesApiAuto(',
            '.SmartlingFileApiV2 import SmartlingFileApiV2' : '.FileApiAutoGenerated import FilesApiAuto',
            'uploadSourceFile(path, ' : 'uploadSourceFile(path, fileUri=path, fileType=',
            'downloadTranslatedFileSingleLocale(path, self.MY_LOCALE)' : 'downloadTranslatedFileSingleLocale(self.MY_LOCALE, path)',
            'importFileTranslations(path, path_to_import, ' : 'importFileTranslations(fileUri=path, file=path_to_import, ',
            'self.file_type, self.MY_LOCALE,' : 'fileType=self.file_type, localeId=self.MY_LOCALE,',
            'etTranslatedFileLastModifiedDateSingleLocale(path, self.MY_LOCALE)':'etTranslatedFileLastModifiedDateSingleLocale(fileUri=path, localeId=self.MY_LOCALE)',
        }
        for src, dst in rewrites.items():
            result = result.replace(src, dst)

        open(src_to,'w').write(result)

    def migrateExample(self):
        self.buildWrapperMap()
        src_from = 'example/AdvancedExample.py'
        src_to = 'example/AutoAdvancedExample.py'
        from_lines = open(src_from, 'r').read().split('\n')
        to_lines = []
        for line in from_lines:
            for api in self.methods:
                if api.oldMethodName:
                    on = self.wrMap[api.oldMethodName]
                    if on and on in line:
                        line = line.replace(on, api.newMethodName)
                        break
            to_lines.append(line)
        result = '\n'.join(to_lines)
        rewrites = {
            'SmartlingFileApiV2(': 'FilesApiAuto(',
            '.SmartlingFileApiV2 import SmartlingFileApiV2' : '.FileApiAutoGenerated import FilesApiAuto',
            'uploadSourceFile(self.FILE_PATH + name, type':'uploadSourceFile(self.FILE_PATH + name, fileType=type',
            't.testUnauthorize()':'',
            't.testAuthorize()':'',
            't.testGetAllLocalesCsv()':'',
            '.get_original(':'.downloadSourceFile(',
            'getFileTranslationStatusSingleLocale(self.uri, self.MY_LOCALE)':'getFileTranslationStatusSingleLocale(self.MY_LOCALE, self.uri)',
            'exportFileTranslations(self.uri, self.FILE_PATH+self.FILE_NAME, (self.MY_LOCALE))':'exportFileTranslations((self.MY_LOCALE),self.FILE_PATH+self.FILE_NAME, self.uri)',
            'self.uri, self.MY_LOCALE':'self.MY_LOCALE, self.uri',
            'self.uri16, self.MY_LOCALE':'self.MY_LOCALE, self.uri16',
            'importFileTranslations(originalPath, translatedPath, self.FILE_TYPE_IMPORT, self.MY_LOCALE,':'importFileTranslations(file=translatedPath, fileType=self.FILE_TYPE_IMPORT, localeId=self.MY_LOCALE,',
            '':'',
        }

        for src, dst in list(rewrites.items()):
            b4 = result
            result = result.replace(src, dst)
            if b4 != result:
                del rewrites[src]

        open(src_to,'w').write(result)
        for src, dst in list(rewrites.items()):
            print (src)
