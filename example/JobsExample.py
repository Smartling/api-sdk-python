
#!/usr/bin/python
# -*- coding: utf-8 -*-


''' Copyright 2012-2021 Smartling, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this work except in compliance with the License.
 * You may obtain a copy of the License in the LICENSE file, or at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
'''

import os
import sys
import time, datetime

lib_path = os.path.abspath('../')
sys.path.append(lib_path)  # allow to import ../smartlingApiSdk/SmartlingFileApi

from smartlingApiSdk.JobsApiAutoGenerated import JobsApiAuto
from smartlingApiSdk.ProxySettings import ProxySettings
from smartlingApiSdk.Credentials import Credentials

isPython3 =  sys.version_info[:2] >= (3,0)

def assert_equal(a,b):
    if a != b :
        err = "Assertion Failed: '%s' != '%s'" % (a,b)
        if not isPython3 and type(err) == str:
            err = err.decode('utf-8', 'ignore')
        raise Exception(repr(err))

class testJobsApiAuto(object):

    CODE_SUCCESS_TOKEN = 'SUCCESS'

    def setUp(self):
        credentials = Credentials() #Gets your Smartling credetnials from environment variables
        self.MY_USER_IDENTIFIER = credentials.MY_USER_IDENTIFIER
        self.MY_USER_SECRET = credentials.MY_USER_SECRET
        self.MY_PROJECT_ID = credentials.MY_PROJECT_ID

        #needed for testProjects
        self.MY_ACCOUNT_UID = credentials.MY_ACCOUNT_UID
        self.MY_LOCALE = credentials.MY_LOCALE
        self.jobname = 'test_job_'+str(int(time.time()))

        if self.MY_ACCOUNT_UID == "CHANGE_ME":
            print("can't test projects api call, set self.MY_ACCOUNT_UID or export SL_ACCOUNT_UID=*********")
            return

        useProxy = False
        if useProxy :
            proxySettings = ProxySettings("login", "password", "proxy_host", "proxy_port or None")
        else:
            proxySettings = None

        self.papi = JobsApiAuto(self.MY_USER_IDENTIFIER, self.MY_USER_SECRET, self.MY_PROJECT_ID, proxySettings)

        print("setUp", "OK", "\n")


    def tearDown(self):
        print("tearDown", "OK")

    def deleteAllJobs(self):
        response,code = self.papi.getJobsByProject()
        c = 0
        sz = len(response.data.items)
        for job in response.data.items:
            c += 1
            uid = job['translationJobUid']

            cres, cstatus = self.papi.cancelJob(uid, 'test reason')
            res, status = self.papi.deleteJob(uid)
            print (c, 'of', sz, uid, cstatus, status)

    def dateTimeStr(self, offset):
        return datetime.datetime.fromtimestamp(time.time()+offset).strftime("%Y-%m-%dT%H:%M:%SZ")


    def testAddJob(self):
        """
            post
            /jobs-api/v3/projects/{projectId}/jobs
            for details check: https://api-reference.smartling.com/#operation/addJob
            curl -X POST -H "Authorization: Bearer $smartlingToken" -H "Content-Type: application/json" -d "$smartlingJobJSON" https://api.smartling.com/jobs-api/v3/projects/$smartlingProjectId/jobs

            ------------------------------------------------------------------------------------------------------------------------
        """
        jobName=self.jobname
        targetLocaleIds=[self.MY_LOCALE,]
        description='testDescription'
        dueDate=self.dateTimeStr(2)
        referenceNumber='testReferenceNumber'
        callbackUrl='https://www.callback.com/smartling/job'
        callbackMethod='GET'
        customFields=[]
        res, status = self.papi.addJob(jobName=jobName, targetLocaleIds=targetLocaleIds, description=description, dueDate=dueDate, referenceNumber=referenceNumber, callbackUrl=callbackUrl, callbackMethod=callbackMethod, customFields=customFields)
        
        assert_equal(200, status)
        assert_equal(self.CODE_SUCCESS_TOKEN, res.code)
        print("addJob", "OK")
        
        self.testDeleteJob()




    def testDeleteJob(self):
        """
            delete
            /jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}
            for details check: https://api-reference.smartling.com/#operation/deleteJob

            ------------------------------------------------------------------------------------------------------------------------
        """
        
        d, status = self.papi.getJobsByProject(jobName=self.jobname)
        jobs_list = d.data.items
        translationJobUid=jobs_list[0]["translationJobUid"]
        self.papi.cancelJob(translationJobUid, 'test reason')
        
        translationJobUid=translationJobUid=jobs_list[0]["translationJobUid"]
        res, status = self.papi.deleteJob(translationJobUid=translationJobUid)
        
        assert_equal(200, status)
        assert_equal(self.CODE_SUCCESS_TOKEN, res.code)
        print("deleteJob", "OK")





t = testJobsApiAuto()
t.setUp()
t.testAddJob()
t.tearDown()
